#summary One-sentence summary of this page.

= Introduction =

L'api Delcampe propose une interactivité pour des opérations de vente.

== Fonctionnalités présentes ==
  * mettre un objet en vente (aux enchères ou à prix fixe)
  * liste de mes objets (avec possiblité de filtre)
  * modifier un objet
  * modifier les images d'un objet
  * liste des actions auxquelle j'ai droit
  * obtenir l'heure du serveur
  * modifier l'url des retours d'information
  * fermer une vente
  
== Fonctionnalités futures ==
 * présenter un objet dans un catalogue de vente (pour utilisateurs prestige)
 * présenter un objet dans une vitrine de recherche (i want it)

 * obtenir les informations d'un compte (la quantité d'information diffère en fonction de 
  * c'est moi
  * c'est le membre lié à mon api key
  * c'est le membre qui a remporté un de mes objets 
  * c'est un membre
 
 * récuperer des listes
  * Liste des catégories
  * Liste des modifications de catégorie
  
----

= Faire son client Soap = 
 * ruby : http://broadcast.oreilly.com/2008/12/creating-custom-soap-requests.html
 * perl : http://msdn.microsoft.com/en-us/library/ms995764.aspx
 * java : http://cafeconleche.org/books/xmljava/chapters/ch03s05.html
 * php/drupal via nuSoap : http://thedrupalblog.com/executing-soap-call-drupal-using-nusoap
 * python : http://www.ibm.com/developerworks/library/ws-pyth5/
= Le client en php = 


{{{
Zend_Loader::loadClass('Zend_Soap_Client');
$objSoapClient = new Zend_Soap_Client('http://api.delcampe.net/soap.php?wsdl');
}}}


= Documentation via Soap =

 * http://api.delcampe.net/soap.php?wsdl
{{{
var_export($objSoapClient->getFunctions());
var_export($objSoapClient->getFieldsNameForAuction());
var_export($objSoapClient->getFieldsNameForFixedPriceItem());
}}}

http://tools.pointbeing.net/wsdlviewer?wsdl=http%3A%2F%2Fapi.delcampe.net%2Fsoap.php%3Fwsdl&sudmit_wsdl=Go


= Authentification = 

 * Chaque développeur dispose d'une apikey liée à un compte membre
 généralement de base, il a 3 apiKey
  * une liée à son propre compte membre
  * une liée à son vendeur
  * une liée à son vendeur "test"

Ensuite on peut avoir autant d'api key qu'il n'y a de vendeurs supplémentaires

L'authentification se résume alors en une simple ligne


{{{
$authResult = $objSoapClient->authenticateUser('L_APIKEY');
}}}



= Ajouter un item =

{{{

list($success,$token) = 
    $objSoapClient->authenticateUser('L_APIKEY');

if(!$success) exit('broken');

$return = 
    $objSoapClient->addItem( $data, 
                             $token );
}}}